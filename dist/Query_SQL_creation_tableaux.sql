--CRÉATION DE BASE DONNÉE
CREATE DATABASE GNLOCATION
GO
USE GNLOCATION
GO



CREATE TABLE AGENCES (
ID_AGE INT IDENTITY (1,1),
NOM_AGE NVARCHAR (100) NOT NULL,
ADRESSE NVARCHAR (150) NOT NULL,
VILLE NVARCHAR (50) NOT NULL,
TELEPHONE VARCHAR (15) NOT NULL, CONSTRAINT chk_telephone_tableau_agences CHECK (
TELEPHONE LIKE '+1 [2-9][0-9][0-9]-[2-9][0-9][0-9]-[0-9][0-9][0-9][0-9]'),
EMAIL NVARCHAR (255) NOT NULL, CONSTRAINT chk_email_tableau_agences CHECK (
EMAIL LIKE '%@%.%'
AND EMAIL NOT LIKE '%@%@%'),
CONSTRAINT PK_AGENCE PRIMARY KEY (ID_AGE))

CREATE TABLE EMPLOYES(
ID_EMP INT IDENTITY (1,1),
NAS INT UNIQUE NOT NULL,
NOM NVARCHAR (100) NOT NULL,
PRENOM NVARCHAR (100) NOT NULL,
SALAIRE DECIMAL (10,2) NOT NULL,
POSTE NVARCHAR (50) NOT NULL CONSTRAINT chk_poste_tableau_employe CHECK (POSTE IN ('GERANT', 'AGENT ACCUEIL', 'MECANICIEN')),
ID_AGE INT NOT NULL,
CONSTRAINT PK_EMPLOYES PRIMARY KEY (ID_EMP),
CONSTRAINT FK_AGENCE_TABLEAU_EMPLOYES FOREIGN KEY (ID_AGE) REFERENCES AGENCES(ID_AGE))

CREATE TABLE MARQUE_VEHIC (
ID_MARQ INT IDENTITY (1,1),
MARQUE NVARCHAR (100) NOT NULL,
CONSTRAINT PK_MARQUEVEHIC PRIMARY KEY (ID_MARQ))

CREATE TABLE MODELE_VEHIC (
ID_MOD INT IDENTITY (1,1),
MODELE NVARCHAR (100) NOT NULL,
CONSTRAINT PK_MODELEVEHIC PRIMARY KEY (ID_MOD))

CREATE TABLE TYPE_VEHIC(
ID_TP_VEHIC INT IDENTITY (1,1),
TYPE_VEHIC NVARCHAR (100) NOT NULL CONSTRAINT chk_type_vehicule_tableau_type_vehic CHECK (TYPE_VEHIC IN ('VOITURE', 'MOTO', 'CAMION', 'UTILITAIRE'))
CONSTRAINT PK_TYPE_VEHIC PRIMARY KEY (ID_TP_VEHIC))

CREATE TABLE FLOTTE(
ID_VEHIC INT IDENTITY (1,1),
TYPE_CARBUR NVARCHAR (100) NOT NULL CONSTRAINT chk_type_carburante_tableau_flotte CHECK (TYPE_CARBUR IN ('ESSENCE', 'DIESEL', 'HYBRIDE', 'ELECTRICITE')),
ANNEE_FAB SMALLINT NOT NULL,
COULEUR NVARCHAR (100) NOT NULL,
IMMATRICULATION CHAR (7) NOT NULL UNIQUE CONSTRAINT chk_immatriculation_tableau_flotte CHECK (IMMATRICULATION LIKE '[A-Z][A-Z][A-Z] [0-9][0-9][A-Z]'),
STATUS NVARCHAR (20) NOT NULL DEFAULT 'DISPONIBLE' CONSTRAINT chk_status_tableau_flotte CHECK (STATUS IN ('DISPONIBLE', 'EN MAINTENANCE')),
KM INT NOT NULL DEFAULT 0 CONSTRAINT chk_km_tableau_flotte CHECK (KM >= 0),
ID_MARQ INT NOT NULL,
ID_MOD INT NOT NULL,
ID_TP_VEHIC INT NOT NULL
CONSTRAINT PK_VEHICULE PRIMARY KEY (ID_VEHIC),
CONSTRAINT FK_MARQUE_VEHIC_TABLEAU_FLOTTE FOREIGN KEY (ID_MARQ) REFERENCES MARQUE_VEHIC(ID_MARQ),
CONSTRAINT FK_MODELE_VEHIC_TABLEAU_FLOTTE FOREIGN KEY (ID_MOD) REFERENCES MODELE_VEHIC(ID_MOD),
CONSTRAINT FK_TYPE_VEHIC_TABLEAU_FLOTTE FOREIGN KEY (ID_TP_VEHIC) REFERENCES TYPE_VEHIC(ID_TP_VEHIC))

CREATE TABLE DISPO_VEHICULE (
ID_AGE INT NOT NULL,
ID_VEHIC INT NOT NULL,
DISPON_STOCK NVARCHAR (50) NOT NULL DEFAULT 'DISPONIBLE' CONSTRAINT chk_dispon_stock_tableau_dispo_vehicule CHECK (DISPON_STOCK IN ('DISPONIBLE', 'NON DISPONIBLE')),
CONSTRAINT FK_AGENCE_TABLEAU_DISPO_VEHICULE FOREIGN KEY (ID_AGE) REFERENCES AGENCES(ID_AGE),
CONSTRAINT FK_FLOTTE_TABLEAU_DISPO_VEHICULE FOREIGN KEY (ID_VEHIC) REFERENCES FLOTTE(ID_VEHIC))

CREATE TABLE MAINTENANCE (
ID_MAINTEN INT IDENTITY (1,1),
TYPE_MAINTEN NVARCHAR (50) NOT NULL CONSTRAINT chk_type_maintenance_tableau_maintenance CHECK (TYPE_MAINTEN IN ('REVISION', 'REPARATION', 'CONTROLE TECHNIQUE')),
DATE_MAINTEN DATETIME NOT NULL,
DATE_MAINTEN_FIN DATETIME,
DESC_MAINTEN NVARCHAR (500),
STATUS_MAINT NVARCHAR (30) NOT NULL CONSTRAINT chk_status_maintenance_tableau_maintenance CHECK (STATUS_MAINT IN ('EN MAINTENANCE', 'TERMINEE')),
ID_VEHIC INT NOT NULL,
ID_EMP INT NOT NULL,
CONSTRAINT PK_MAINTENANCE PRIMARY KEY (ID_MAINTEN),
CONSTRAINT FK_FLOTTE_TABLEAU_MAINTENANCE FOREIGN KEY (ID_VEHIC) REFERENCES FLOTTE(ID_VEHIC),
CONSTRAINT FK_EMPLOYES_TABLEAU_MAINTENANCE FOREIGN KEY (ID_EMP) REFERENCES EMPLOYES(ID_EMP))

CREATE TABLE CLIENTS (
ID_CLIENT INT IDENTITY (1,1),
NOM NVARCHAR (100) NOT NULL,
PRENOM NVARCHAR (100) NOT NULL,
ADRESSE NVARCHAR (200) NOT NULL,
PERMIS_COND NVARCHAR (17) NOT NULL UNIQUE,
HIST_ACCIDENTS INT,
EMAIL NVARCHAR (255), CONSTRAINT chk_email_tableau_clients CHECK (
    EMAIL LIKE '%@%.%'
    AND EMAIL NOT LIKE '%@%@%'),
TELEPHONE NVARCHAR (20) NOT NULL, CONSTRAINT chk_telephone_tableau_clients CHECK (
TELEPHONE LIKE '+1 [2-9][0-9][0-9]-[2-9][0-9][0-9]-[0-9][0-9][0-9][0-9]'),
CARTE_CRED VARCHAR (19) NOT NULL CONSTRAINT chk_cartaotableau_clients CHECK (CARTE_CRED LIKE '[0-9][0-9][0-9][0-9]%')
CONSTRAINT PK_CLIENTS PRIMARY KEY (ID_CLIENT))

CREATE TABLE TARIFATION (
ID_TARIF INT IDENTITY (1,1),
KM_JOUR INT NOT NULL CONSTRAINT chk_km_tableau_tarifation CHECK (KM_JOUR >= 0),
PRIX_LOCAT_JOUR DECIMAL (10,2) NOT NULL,
ID_TP_VEHIC INT NOT NULL,
CONSTRAINT PK_TARIFATION PRIMARY KEY (ID_TARIF),
CONSTRAINT FK_TYPE_VEHIC_TABLEAU_TARIFATION FOREIGN KEY (ID_TP_VEHIC) REFERENCES TYPE_VEHIC(ID_TP_VEHIC))

CREATE TABLE OPTIONNELS (
ID_OPTIO INT IDENTITY (1,1),
NOM_OPTIO NVARCHAR (100) NOT NULL,
PRIX_OPTIO_JOUR DECIMAL (10,2),
CONSTRAINT PK_OPTIONNELS PRIMARY KEY (ID_OPTIO))

CREATE TABLE ASSURANCE (
ID_ASSURANCE INT IDENTITY (1,1),
TYPE_ASSURANCE VARCHAR (30) NOT NULL DEFAULT 'RESPONSABILITE CIVILE' CONSTRAINT chk_type_assurance_tableau_assurance CHECK (
TYPE_ASSURANCE IN ('RESPONSABILITE CIVILE', 'COLLOSION', 'TOUS RISQUES')), 
PRIX_JOUR DECIMAL (10,2) NOT NULL,
CONSTRAINT PK_ASSURANCE PRIMARY KEY (ID_ASSURANCE))

GO
CREATE FUNCTION dbo.CalculerPrixTotalReservation(@ID_RESERV INT)
RETURNS DECIMAL(10,2)
AS
BEGIN
    DECLARE @Total DECIMAL(10,2);

    SELECT @Total = 
        (T.PRIX_LOCAT_JOUR * R.DUREE_JOUR) +
        (A.PRIX_JOUR * R.DUREE_JOUR) + 
        COALESCE(O.PRIX_OPTIO_JOUR * R.DUREE_JOUR, 0)
    FROM RESERVATIONS R
    INNER JOIN TARIFATION T ON R.ID_TARIF = T.ID_TARIF
    INNER JOIN ASSURANCE A ON R.ID_ASSURANCE = A.ID_ASSURANCE
    LEFT JOIN OPTIONNELS O ON R.ID_OPTIO = O.ID_OPTIO
    WHERE R.ID_RESERV = @ID_RESERV;

    RETURN COALESCE(@Total, 0);
END;
GO

CREATE TABLE RESERVATIONS (
ID_RESERV INT IDENTITY (1,1),
DATE_DEBUT DATE NOT NULL, --CONSTRAINT chk_data_debut_tableau_reservations CHECK (DATE_DEBUT >= CONVERT(DATE, GETDATE())),
DATE_FIN DATE NOT NULL,
STATUS_RESER VARCHAR (20) NOT NULL DEFAULT 'EN ATTENTE' CONSTRAINT chk_status_reserv_tableau_reservation CHECK (
STATUS_RESER IN ('EN ATTENTE', 'CONFIRMEE', 'ANNULEE', 'TERMINEE')),
DUREE_JOUR AS DATEDIFF(DAY, DATE_DEBUT, DATE_FIN) PERSISTED,
ID_CLIENT INT NOT NULL,
ID_VEHIC INT NOT NULL,
ID_TARIF INT NOT NULL,
ID_ASSURANCE INT NOT NULL,
ID_OPTIO INT,
PRIX_TOTAL AS dbo.CalculerPrixTotalReservation(ID_RESERV),
CONSTRAINT PK_RESERVATIONS PRIMARY KEY (ID_RESERV),
CONSTRAINT FK_CLIENTS_TABLEAU_RESERVATIONS FOREIGN KEY (ID_CLIENT) REFERENCES CLIENTS(ID_CLIENT),
CONSTRAINT FK_FLOTTE_TABLEAU_RESERVATIONS FOREIGN KEY (ID_VEHIC) REFERENCES FLOTTE(ID_VEHIC),
CONSTRAINT FK_TARIFATION_TABLEAU_RESERVATIONS FOREIGN KEY (ID_TARIF) REFERENCES TARIFATION(ID_TARIF),
CONSTRAINT FK_ASSURANCE_TABLEAU_RESERVATIONS FOREIGN KEY (ID_ASSURANCE) REFERENCES ASSURANCE(ID_ASSURANCE),
CONSTRAINT FK_OPTIONNELS_TABLEAU_RESERVATIONS FOREIGN KEY (ID_OPTIO) REFERENCES OPTIONNELS(ID_OPTIO))

CREATE TABLE CONTRACTS (
    ID_CONTRACT INT IDENTITY (1,1),
    DATE_DEBUT DATE NOT NULL,
    DATE_FIN DATE NOT NULL,
    DUREE_JOURS INT NOT NULL,
    PRIX_TOTAL DECIMAL(10,2) NOT NULL,

    STATUS_CONTRACT VARCHAR(20) NOT NULL 
        CONSTRAINT chk_status_contract_tableau_contracts 
        CHECK (STATUS_CONTRACT IN ('EN COURS', 'TERMINEE')),

    ID_RESERV INT NOT NULL UNIQUE,
    ID_EMP INT NOT NULL,
    
    CONSTRAINT PK_CONTRACTS PRIMARY KEY (ID_CONTRACT),
    CONSTRAINT FK_RESERVATIONS_TABLEAU_CONTRACTS FOREIGN KEY (ID_RESERV) REFERENCES RESERVATIONS(ID_RESERV),
    CONSTRAINT FK_EMPLOYES_TABLEAU_CONTRACTS FOREIGN KEY (ID_EMP) REFERENCES EMPLOYES(ID_EMP))


CREATE TABLE INCIDENTS(
ID_INCIDENT INT IDENTITY (1,1),
TYPE_INCIDENT VARCHAR (30) NOT NULL CONSTRAINT chk_tp_incident_tableau_incident CHECK (
TYPE_INCIDENT IN ('ACCIDENT', 'PANNE', 'VOL')),
DATE_INCIDENT DATE NOT NULL,
COUTS DECIMAL (10,2) NOT NULL,
DETAILS NVARCHAR (200) NOT NULL,
ID_CONTRACT INT NOT NULL UNIQUE,
CONSTRAINT PK_INCIDENTS PRIMARY KEY (ID_INCIDENT),
CONSTRAINT FK_CONTRACTS_TABLEAU_INCIDENTS FOREIGN KEY (ID_CONTRACT) REFERENCES CONTRACTS(ID_CONTRACT))


-------------------------------

GO
CREATE TRIGGER trg_UpdateStatusDispo_Flotte
ON FLOTTE
AFTER UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    IF UPDATE(STATUS)
    BEGIN
        UPDATE dv
        SET DISPON_STOCK = 
            CASE 
                WHEN i.STATUS = 'DISPONIBLE' THEN 'DISPONIBLE'
                ELSE 'NON DISPONIBLE'
            END
        FROM DISPO_VEHICULE dv
        INNER JOIN INSERTED i ON dv.ID_VEHIC = i.ID_VEHIC;
    END
END
GO


GO
CREATE TRIGGER trg_UpdateStatusFlotte
ON MAINTENANCE
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE f
    SET f.STATUS = 'EN MAINTENANCE'
    FROM FLOTTE f
    INNER JOIN INSERTED i ON f.ID_VEHIC = i.ID_VEHIC
    WHERE i.STATUS_MAINT = 'EN MAINTENANCE';

    UPDATE f
    SET f.STATUS = 'DISPONIBLE'
    FROM FLOTTE f
    INNER JOIN INSERTED i ON f.ID_VEHIC = i.ID_VEHIC
    WHERE i.STATUS_MAINT = 'TERMINEE';
END
GO


GO
CREATE TRIGGER trg_UpdateDisponibiliteVehicule
ON RESERVATIONS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE DV
    SET DISPON_STOCK = 'NON DISPONIBLE'
    FROM DISPO_VEHICULE DV
    INNER JOIN INSERTED I 
        ON DV.ID_VEHIC = I.ID_VEHIC
    WHERE I.STATUS_RESER = 'CONFIRMEE';

    UPDATE DV
    SET DISPON_STOCK = 'DISPONIBLE'
    FROM DISPO_VEHICULE DV
    INNER JOIN INSERTED I
        ON DV.ID_VEHIC = I.ID_VEHIC
    WHERE I.STATUS_RESER IN ('TERMINEE', 'ANNULEE');
END;
GO

/*
GO
CREATE TRIGGER trg_CreerContract
ON RESERVATIONS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;


    INSERT INTO CONTRACTS (
        DATE_DEBUT, 
        DATE_FIN, 
        DUREE_JOURS, 
        PRIX_TOTAL, 
        STATUS_CONTRACT, 
        ID_RESERV, 
        ID_EMP
    )
    SELECT 
        i.DATE_DEBUT,
        i.DATE_FIN,
        i.DUREE_JOUR,
        i.PRIX_TOTAL,
        'EN COURS',
        i.ID_RESERV,
        (SELECT TOP 1 ID_EMP FROM EMPLOYES ORDER BY NEWID())
    FROM INSERTED i
    LEFT JOIN CONTRACTS C ON i.ID_RESERV = C.ID_RESERV
    WHERE i.STATUS_RESER = 'CONFIRMEE'
    AND C.ID_RESERV IS NULL; 

    UPDATE C
    SET C.STATUS_CONTRACT = 'TERMINE'
    FROM CONTRACTS C
    INNER JOIN INSERTED i ON C.ID_RESERV = i.ID_RESERV
    WHERE i.STATUS_RESER = 'TERMINEE';
END;
GO
*/

GO
CREATE TRIGGER trg_CreerContract
ON RESERVATIONS
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    -- Criar tabela temporária com a lista de funcionários disponíveis
    DECLARE @tmpEmp TABLE (ID_EMP INT);
    
    INSERT INTO @tmpEmp (ID_EMP)
    SELECT ID_EMP 
    FROM EMPLOYES 
    WHERE POSTE NOT IN ('MECANICIEN', 'GERANT')
    ORDER BY NEWID();  -- Lista aleatória de funcionários disponíveis

    -- Variáveis para armazenar os dados da reserva
    DECLARE @idReserv INT, @dateDebut DATE, @dateFin DATE, @dureeJour INT, @prixTotal DECIMAL(10,2);
    DECLARE @idEmp INT;

    -- Cursor para percorrer as reservas inseridas
    DECLARE cur CURSOR FOR 
    SELECT ID_RESERV, DATE_DEBUT, DATE_FIN, DUREE_JOUR, PRIX_TOTAL
    FROM INSERTED
    WHERE STATUS_RESER = 'CONFIRMEE';

    OPEN cur;
    
    FETCH NEXT FROM cur INTO @idReserv, @dateDebut, @dateFin, @dureeJour, @prixTotal;
    
    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Seleciona um funcionário disponível
        SELECT TOP 1 @idEmp = ID_EMP FROM @tmpEmp;

        -- Se não houver mais funcionários na lista, recarrega a seleção
        IF @idEmp IS NULL
        BEGIN
            DELETE FROM @tmpEmp;
            
            INSERT INTO @tmpEmp (ID_EMP)
            SELECT ID_EMP 
            FROM EMPLOYES 
            WHERE POSTE NOT IN ('MECANICIEN', 'GERANT')
            ORDER BY NEWID();

            -- Seleciona novamente
            SELECT TOP 1 @idEmp = ID_EMP FROM @tmpEmp;
        END

        -- Inserir contrato com valores corretos
        INSERT INTO CONTRACTS (
            DATE_DEBUT, 
            DATE_FIN, 
            DUREE_JOURS, 
            PRIX_TOTAL, 
            STATUS_CONTRACT, 
            ID_RESERV, 
            ID_EMP
        )
        VALUES (
            @dateDebut, @dateFin, @dureeJour, @prixTotal, 'EN COURS', @idReserv, @idEmp
        );

        -- Remover esse funcionário da lista temporária
        DELETE FROM @tmpEmp WHERE ID_EMP = @idEmp;

        -- Avança para a próxima reserva no cursor
        FETCH NEXT FROM cur INTO @idReserv, @dateDebut, @dateFin, @dureeJour, @prixTotal;
    END

    CLOSE cur;
    DEALLOCATE cur;

    -- Atualiza contratos quando a reserva muda para 'TERMINEE'
    UPDATE C
    SET C.STATUS_CONTRACT = 'TERMINE'
    FROM CONTRACTS C
    INNER JOIN INSERTED i ON C.ID_RESERV = i.ID_RESERV
    WHERE i.STATUS_RESER = 'TERMINEE';
END;
GO



GO
CREATE VIEW VIEW_VEHICULES_DISPONIBLES AS
SELECT 
    F.ID_VEHIC, 
    F.TYPE_CARBUR, 
    F.ANNEE_FAB, 
    F.COULEUR, 
    F.IMMATRICULATION,
    DV.DISPON_STOCK
FROM FLOTTE F
INNER JOIN DISPO_VEHICULE DV ON F.ID_VEHIC = DV.ID_VEHIC
WHERE DV.DISPON_STOCK = 'DISPONIBLE';
GO

GO
CREATE PROCEDURE AjouterNouvelleReservation
    @ID_CLIENT INT,
    @ID_VEHIC INT,
    @DATE_DEBUT DATE,
    @DATE_FIN DATE,
    @ID_TARIF INT,
    @ID_ASSURANCE INT,
    @ID_OPTIO INT = NULL 
AS
BEGIN
    SET NOCOUNT ON;
    
    IF NOT EXISTS (
        SELECT 1 FROM VIEW_VEHICULES_DISPONIBLES
        WHERE ID_VEHIC = @ID_VEHIC
    )
    BEGIN
        RAISERROR('Erreur: Le véhicule sélectionné n''est pas disponible.', 16, 1);
        RETURN;
    END

    IF EXISTS (
        SELECT 1
        FROM RESERVATIONS r
        WHERE r.ID_VEHIC = @ID_VEHIC
          AND r.STATUS_RESER = 'CONFIRMEE'
          AND r.DATE_DEBUT <= @DATE_FIN
          AND @DATE_DEBUT <= r.DATE_FIN
    )
    BEGIN
        RAISERROR('Ce véhicule est déjà réservé (période en conflit).', 16, 1);
        RETURN;
    END

    INSERT INTO RESERVATIONS (
        DATE_DEBUT, DATE_FIN, STATUS_RESER,
        ID_CLIENT, ID_VEHIC, ID_TARIF, ID_ASSURANCE, ID_OPTIO
    )
    VALUES (
        @DATE_DEBUT, @DATE_FIN, 'EN ATTENTE', 
        @ID_CLIENT, @ID_VEHIC, @ID_TARIF, @ID_ASSURANCE, @ID_OPTIO
    );

    PRINT 'Réservation créée avec succès.';
END
GO



GO
CREATE PROCEDURE MettreAJourHistoriqueAccidents
AS
BEGIN
    DECLARE @ID_CLIENT INT, @NbAccidents INT;

    DECLARE cursor_HistoriqueAccidents CURSOR FOR
    SELECT C.ID_CLIENT, COALESCE(COUNT(I.ID_INCIDENT), 0) AS NbAccidents
    FROM CLIENTS C
    LEFT JOIN RESERVATIONS R ON C.ID_CLIENT = R.ID_CLIENT
    LEFT JOIN CONTRACTS CO ON R.ID_RESERV = CO.ID_RESERV
    LEFT JOIN INCIDENTS I ON CO.ID_CONTRACT = I.ID_CONTRACT
    WHERE I.TYPE_INCIDENT IN ('ACCIDENT', 'VOL')
    GROUP BY C.ID_CLIENT

    OPEN cursor_HistoriqueAccidents
    
    FETCH NEXT FROM cursor_HistoriqueAccidents INTO @ID_CLIENT, @NbAccidents

    WHILE @@FETCH_STATUS = 0
    BEGIN
        UPDATE CLIENTS
        SET HIST_ACCIDENTS = @NbAccidents
        WHERE ID_CLIENT = @ID_CLIENT;

        FETCH NEXT FROM cursor_HistoriqueAccidents INTO @ID_CLIENT, @NbAccidents
    END

    CLOSE cursor_HistoriqueAccidents
    DEALLOCATE cursor_HistoriqueAccidents
END
GO

GO
CREATE TRIGGER trg_UpdateHistoriqueAccidents
ON INCIDENTS
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;
    
    EXEC MettreAJourHistoriqueAccidents
END
GO


USE GNLOCATION;  -- Assurer que nous sommes bien dans la base de données cible

-- Étape 1 : Créer un login SQL Server (authentification SQL)
CREATE LOGIN appuser WITH PASSWORD = 'ift2821h25';

-- Étape 2 : Créer un utilisateur au niveau de la base de données GNLOCATION
CREATE USER appuser FOR LOGIN appuser;

USE GNLOCATION;

-- Accorder un accès TOTAL (Lecture, Écriture, Modification, Suppression)
ALTER ROLE db_owner ADD MEMBER appuser;

