from base_donnees import database
from requetes_sql import queries, queriesinputs, queriesupdate, queriesdelete

# ----------------------------- FONCTIONS POUR EMPLOY√âS -----------------------------


# Ajouter un employ√©
def ajouter_employe(nas, nom, prenom, salaire, poste, id_age):
    """Ajoute un employ√© √† la base de donn√©es."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(
                queriesinputs.AJOUTER_EMPLOYE,
                (nas, 
                nom.upper(), 
                prenom.upper(), 
                salaire, 
                poste, 
                id_age),
            )
            connexion.commit()
            print("Employ√© ajout√© avec succ√®s !")
        except Exception as erreur:
            print(f"Erreur lors de l'ajout de l'employ√© : {erreur}")
        finally:
            database.fermer_connexion(connexion)


# R√©cup√©rer un employ√© par ID
def get_employe_par_id(id_emp):
    """R√©cup√®re les informations d'un employ√© sp√©cifique."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(queries.GET_EMPLOYE_PAR_ID, (id_emp,))
            employe = curseur.fetchone()
            return employe  # RETOURNER L'EMPLOY√â
        except Exception as erreur:
            print(f"Erreur lors de la r√©cup√©ration de l'employ√© : {erreur}")
        finally:
            database.fermer_connexion(connexion)
    return None


# R√©cup√©rer la liste des employ√©s pour modification
def afficher_liste_employes_modifier():
    """
    R√©cup√®re la liste des employ√©s sous forme de tableau de donn√©es.
    """
    colonnes = ["ID", "NAS", "Nom", "Pr√©nom", "Salaire", "Poste", "Agence"]
    employes = []

    # Connexion √† la base de donn√©es
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(queries.LISTER_EMPLOYES)
            employes_bd = curseur.fetchall()

            # Ajouter les donn√©es √† la liste
            for employe in employes_bd:
                employes.append([
                    str(employe.ID_EMP),  # ID en cha√Æne pour PyQt
                    employe.NAS,
                    employe.NOM,
                    employe.PRENOM,
                    str(employe.SALAIRE),  # Convertir salaire en string pour affichage
                    employe.POSTE,
                    employe.ID_AGE
                ])

        except Exception as erreur:
            print(f"Erreur lors de la r√©cup√©ration des employ√©s : {erreur}")
        finally:
            database.fermer_connexion(connexion)

    return colonnes, employes


# Modifier un employ√©
def modifier_employe(id_emp, nas, nom, prenom, salaire, poste, id_age):
    """Modifie les informations d'un employ√© existant."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            # V√©rifier si l'employ√© existe avant modification
            employe = get_employe_par_id(id_emp)
            if not employe:
                print("Aucun employ√© trouv√© avec cet ID.")
                return

            # Afficher les informations avant changement
            print("\nD√©tails de l'employ√© s√©lectionn√© :")
            print(f"ID : {employe.ID_EMP}")
            print(f"Nom : {employe.NOM}")
            print(f"Pr√©nom : {employe.PRENOM}")
            print(f"Poste : {employe.POSTE}")

            curseur.execute(
                queriesupdate.MODIFIER_EMPLOYE,
                (
                    nas,
                    nom.upper(),
                    prenom.upper(),
                    salaire,
                    poste.upper(),
                    id_age,
                    id_emp,
                ),
            )
            connexion.commit()
            print("Employ√© modifi√© avec succ√®s !")
        except Exception as erreur:
            print(f"Erreur lors de la modification de l'employ√© : {erreur}")
        finally:
            database.fermer_connexion(connexion)



# Supprimer un employ√©
def afficher_liste_employes_supprimer():
    """
    R√©cup√®re la liste des employ√©s sous forme de tableau de donn√©es pour suppression.
    """
    colonnes = ["ID", "NAS", "Nom", "Pr√©nom", "Salaire", "Poste", "ID Agence"]
    employes = []

    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(queries.LISTER_EMPLOYES)
            employes_bd = curseur.fetchall()

            # Ajouter les employ√©s dans le tableau
            for employe in employes_bd:
                employes.append([
                    str(employe.ID_EMP),  # ID en cha√Æne pour PyQt
                    employe.NAS,
                    employe.NOM,
                    employe.PRENOM,
                    employe.SALAIRE,
                    employe.POSTE,
                    employe.ID_AGE
                ])

        except Exception as erreur:
            print(f"Erreur lors de la r√©cup√©ration des employ√©s : {erreur}")
        finally:
            database.fermer_connexion(connexion)

    return colonnes, employes


def supprimer_employe(id_emp):
    """Supprime un employ√© par son ID apr√®s v√©rification de son existence."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()

            # V√©rifier si l'employ√© existe avant suppression
            curseur.execute(queries.GET_EMPLOYE_PAR_ID, (id_emp,))
            employe = curseur.fetchone()

            if not employe:
                print("Aucun employ√© trouv√© avec cet ID.")
                return

            # Afficher les informations avant suppression (debug)
            print("\nD√©tails de l'employ√© s√©lectionn√© :")
            print(f"ID : {employe.ID_EMP}")
            print(f"Nom : {employe.NOM}")
            print(f"Pr√©nom : {employe.PRENOM}")

            # Supprimer l'employ√©
            curseur.execute(queriesdelete.SUPPRIMER_EMPLOYE, (id_emp,))
            connexion.commit()
            print("Employ√© supprim√© avec succ√®s !")
        except Exception as erreur:
            print(f"Erreur lors de la suppression de l'employ√© : {erreur}")
        finally:
            database.fermer_connexion(connexion)


# Lister tous les employ√©s
def lister_employes():
    """Retourne une liste de tous les employ√©s avec le NOM de l'agence au lieu de son ID."""
    connexion = database.connecter()
    employes = []

    if connexion:
        try:
            curseur = connexion.cursor()
            # üîπ Jointure entre employ√©s et agences pour obtenir le NOM au lieu de l'ID
            curseur.execute("""
                SELECT e.ID_EMP, e.NAS, e.NOM, e.PRENOM, e.SALAIRE, e.POSTE, a.NOM_AGE
                FROM EMPLOYES e
                JOIN AGENCES a ON e.ID_AGE = a.ID_AGE
            """)
            resultats = curseur.fetchall()

            for employe in resultats:
                employes.append((
                    employe.ID_EMP,
                    employe.NAS,
                    employe.NOM,
                    employe.PRENOM,
                    employe.SALAIRE,
                    employe.POSTE,
                    employe.NOM_AGE  # üîπ Afficher le NOM de l'agence au lieu de l'ID
                ))

        except Exception as erreur:
            print(f"Erreur lors de la r√©cup√©ration des employ√©s : {erreur}")
        finally:
            database.fermer_connexion(connexion)

    return employes  # üîπ Retourne la liste mise √† jour



# Rechercher un employ√© par NAS ou Nom
def rechercher_employe(terme_recherche):
    """Recherche un employ√© par NAS, Nom ou Pr√©nom et retourne les r√©sultats sous forme de tableau."""
    connexion = database.connecter()
    colonnes = ["ID", "NAS", "Nom", "Pr√©nom", "Salaire", "Poste", "Agence"]
    employes = []

    if connexion:
        try:
            curseur = connexion.cursor()
            terme = f"%{terme_recherche}%"  # üîπ Ajoute les wildcards pour la recherche

            # üîπ Ajout des marqueurs `?` ou `%s` selon le SGBD utilis√©
            requete = """
                SELECT e.ID_EMP, e.NAS, e.NOM, e.PRENOM, e.SALAIRE, e.POSTE, a.NOM_AGE
                FROM EMPLOYES e
                JOIN AGENCES a ON e.ID_AGE = a.ID_AGE
                WHERE e.NAS LIKE ? OR e.NOM LIKE ? OR e.PRENOM LIKE ?
            """

            curseur.execute(requete, (terme, terme, terme))  # üîπ Ajout correct des param√®tres
            resultats = curseur.fetchall()

            for employe in resultats:
                employes.append([
                    employe.ID_EMP,
                    employe.NAS,
                    employe.NOM,
                    employe.PRENOM,
                    employe.SALAIRE,
                    employe.POSTE,
                    employe.NOM_AGE  # üîπ Affiche bien le NOM de l'agence
                ])

        except Exception as erreur:
            print(f"Erreur lors de la recherche d'employ√© : {erreur}")
        finally:
            database.fermer_connexion(connexion)

    return colonnes, employes  # üîπ Retourne une liste m√™me si vide


