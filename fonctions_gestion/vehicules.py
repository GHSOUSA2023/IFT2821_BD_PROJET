from base_donnees import database
from requetes_sql import queries, queriesinputs, queriesupdate, queriesdelete

# ----------------------------- FONCTIONS POUR V√âHICULES -----------------------------

# üîπ Ajouter un v√©hicule
def ajouter_vehicule(immatriculation, type_carbur, annee_fab, couleur, status, km, id_marq, id_mod, id_tp_vehic):
    """Ajoute un v√©hicule √† la base de donn√©es."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(
                queriesinputs.AJOUTER_VEHICULE,
                (immatriculation, type_carbur, annee_fab, couleur, status, km, id_marq, id_mod, id_tp_vehic),
            )
            connexion.commit()
            print("üöó V√©hicule ajout√© avec succ√®s !")
        except Exception as erreur:
            print(f"‚ùå Erreur lors de l'ajout du v√©hicule : {erreur}")
        finally:
            database.fermer_connexion(connexion)

# üîπ Modifier un v√©hicule
def modifier_vehicule(id_vehic, immatriculation, type_carbur, annee_fab, couleur, status, km, id_marq, id_mod, id_tp_vehic):
    """Modifie les informations d'un v√©hicule existant."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            # V√©rifier si le v√©hicule existe avant modification
            vehicule = get_vehicule_par_id(id_vehic)
            if not vehicule:
                print("‚ùå Aucun v√©hicule trouv√© avec cet ID.")
                return

            curseur.execute(
                queriesupdate.MODIFIER_VEHICULE,
                (immatriculation, type_carbur, annee_fab, couleur, status, km, id_marq, id_mod, id_tp_vehic, id_vehic),
            )
            connexion.commit()
            print("üöó V√©hicule modifi√© avec succ√®s !")
        except Exception as erreur:
            print(f"‚ùå Erreur lors de la modification du v√©hicule : {erreur}")
        finally:
            database.fermer_connexion(connexion)

# üîπ Supprimer un v√©hicule
def supprimer_vehicule(id_vehic):
    """Supprime un v√©hicule par son ID apr√®s v√©rification de son existence."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(queriesdelete.SUPPRIMER_VEHICULE, (id_vehic,))
            connexion.commit()
            print("üöó V√©hicule supprim√© avec succ√®s !")
        except Exception as erreur:
            print(f"‚ùå Erreur lors de la suppression du v√©hicule : {erreur}")
        finally:
            database.fermer_connexion(connexion)

# üîπ Lister tous les v√©hicules
def lister_tous_vehicules():
    """Retourne une liste de tous les v√©hicules enregistr√©s avec d√©tails associ√©s."""
    connexion = database.connecter()
    vehicules = []

    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(queries.LISTER_VEHICULES)
            resultats = curseur.fetchall()

            for vehicule in resultats:
                vehicules.append((
                    vehicule.ID_VEHIC,
                    vehicule.IMMATRICULATION,
                    vehicule.TYPE_CARBUR,
                    vehicule.ANNEE_FAB,
                    vehicule.COULEUR,
                    vehicule.STATUS,
                    vehicule.KM,
                    vehicule.NOM_MARQUE,
                    vehicule.NOM_MODELE,
                    vehicule.TYPE_VEHICULE,
                ))

        except Exception as erreur:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des v√©hicules : {erreur}")
        finally:
            database.fermer_connexion(connexion)

    return vehicules

# üîπ Rechercher un v√©hicule par immatriculation ou mod√®le
def rechercher_vehicule(terme_recherche):
    """Recherche un v√©hicule par immatriculation ou mod√®le et retourne les r√©sultats sous forme de tableau."""
    connexion = database.connecter()
    colonnes = ["ID", "Immatriculation", "Carburant", "Ann√©e", "Couleur", "Statut", "KM", "Marque", "Mod√®le", "Type"]
    vehicules = []

    if connexion:
        try:
            curseur = connexion.cursor()
            terme = f"%{terme_recherche}%"
            curseur.execute(queries.RECHERCHER_VEHICULE, (terme, terme))
            resultats = curseur.fetchall()

            for vehicule in resultats:
                vehicules.append([
                    vehicule.ID_VEHIC,
                    vehicule.IMMATRICULATION,
                    vehicule.TYPE_CARBUR,
                    vehicule.ANNEE_FAB,
                    vehicule.COULEUR,
                    vehicule.STATUS,
                    vehicule.KM,
                    vehicule.NOM_MARQUE,
                    vehicule.NOM_MODELE,
                    vehicule.TYPE_VEHICULE
                ])

        except Exception as erreur:
            print(f"‚ùå Erreur lors de la recherche de v√©hicules : {erreur}")
        finally:
            database.fermer_connexion(connexion)

    return colonnes, vehicules

# üîπ R√©cup√©rer un v√©hicule par ID
def get_vehicule_par_id(id_vehic):
    """R√©cup√®re les informations d'un v√©hicule sp√©cifique."""
    connexion = database.connecter()
    if connexion:
        try:
            curseur = connexion.cursor()
            curseur.execute(queries.GET_VEHICULE_PAR_ID, (id_vehic,))
            vehicule = curseur.fetchone()
            return vehicule
        except Exception as erreur:
            print(f"‚ùå Erreur lors de la r√©cup√©ration du v√©hicule : {erreur}")
        finally:
            database.fermer_connexion(connexion)
    return None
