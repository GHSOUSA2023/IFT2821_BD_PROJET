from PyQt5.QtWidgets import QWidget, QVBoxLayout, QPushButton, QLabel, QFrame
from PyQt5.QtCore import Qt
from interface_utilisateur.agences.ui_styles_agences import BUTTON_STYLE, FRAME_STYLE, TITLE_STYLE
from fonctions_gestion.vehicules import (
    ajouter_vehicule, modifier_vehicule, supprimer_vehicule, lister_tous_vehicules, rechercher_vehicule, get_vehicule_par_id)
from fonctions_gestion.flotte import lister_marques, lister_tout_modeles, lister_tout_tp_vehic, lister_vehicules_en_maintenance
from interface_utilisateur.tableaux.ui_tableau_vehicules import TableauVehiculesUI
from interface_utilisateur.agences.vehicules.ui_formulaire_vehicules import FormulaireVehiculeUI
from interface_utilisateur.tableaux.ui_tableau_vehicules_maintenance import TableauVehiculesMaintUI


class GestionVehiculesUI(QWidget):
    """
    Interface avanc√©e pour la gestion des v√©hicules, utilisant le QStackedWidget
    pour afficher un tableau sans ouvrir de nouvelle fen√™tre.
    """
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window  # R√©f√©rence √† la MainWindow
        self.setWindowTitle("Gestion des V√©hicules")
        self.setGeometry(100, 100, 900, 600)
        self.setStyleSheet("background-color: #EAEDED;")
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)

        # Titre principal
        label_title = QLabel("GESTION DES V√âHICULES - AVANC√âE")
        label_title.setStyleSheet(TITLE_STYLE)
        label_title.setAlignment(Qt.AlignCenter)

        # Conteneur (Card)
        frame = QFrame()
        frame.setStyleSheet(FRAME_STYLE)
        frame_layout = QVBoxLayout()

        # Boutons
        btn_ajouter = QPushButton("‚ûï Ajouter un V√©hicule")
        btn_modifier = QPushButton("‚úè Modifier un V√©hicule")
        btn_supprimer = QPushButton("üóë Supprimer un V√©hicule")
        btn_lister = QPushButton("üìã Lister les V√©hicules")
        btn_rechercher = QPushButton("üîç Rechercher un V√©hicule")
        btn_maintenance = QPushButton("üõ†Ô∏è Maintenance du V√©hicule")
        btn_retour = QPushButton("‚¨Ö Retour")

        for btn in [btn_ajouter, btn_modifier, btn_supprimer, btn_lister, btn_rechercher, btn_maintenance, btn_retour]:
            btn.setStyleSheet(BUTTON_STYLE)

        # Connexions des boutons aux actions
        btn_ajouter.clicked.connect(self.ouvrir_formulaire_ajouter)
        btn_modifier.clicked.connect(self.afficher_liste_vehicules_modifier)
        btn_supprimer.clicked.connect(self.afficher_liste_vehicules_supprimer)
        btn_lister.clicked.connect(self.afficher_liste_vehicules)
        btn_maintenance.clicked.connect(self.gerer_maintenance_vehicule)
        btn_rechercher.clicked.connect(self.rechercher_vehicule)

        btn_retour.clicked.connect(lambda: self.main_window.afficher_interface(self.main_window.ui_agences))

        for btn in [btn_ajouter, btn_modifier, btn_supprimer, btn_lister, btn_rechercher, btn_maintenance, btn_retour]:
            frame_layout.addWidget(btn)

        frame.setLayout(frame_layout)

        layout.addWidget(label_title)
        layout.addWidget(frame)
        self.setLayout(layout)

    # ------------------- Fonctions -------------------

    def ouvrir_formulaire_ajouter(self):
        """
        Ouvre le formulaire pour ajouter un nouveau v√©hicule.
        """
        self.ui_formulaire_vehicules = FormulaireVehiculeUI(self.main_window, mode="ajouter")
        self.main_window.central_widget.addWidget(self.ui_formulaire_vehicules)
        self.main_window.central_widget.setCurrentWidget(self.ui_formulaire_vehicules)

    def afficher_liste_vehicules_modifier(self):
        vehicules = lister_tous_vehicules()
        colonnes = ["ID", "Immatriculation", "Carburant", "Ann√©e", "Couleur", "Statut", "KM", "Marque", "Mod√®le", "Type"]

        if vehicules:
            self.tableau_vehicules_modifier = TableauVehiculesUI("Modifier un V√©hicule", colonnes, vehicules, self.main_window, self)
            self.tableau_vehicules_modifier.table_widget.cellClicked.connect(self.ouvrir_formulaire_modifier)
            self.main_window.central_widget.addWidget(self.tableau_vehicules_modifier)
            self.main_window.central_widget.setCurrentWidget(self.tableau_vehicules_modifier)



    def ouvrir_formulaire_modifier(self, row, column):
        """
        R√©cup√®re tous les v√©hicules et les affiche dans le tableau.
        """
        colonnes = ["ID", "Immatriculation", "Carburant", "Ann√©e", "Couleur", "Statut", "KM", "Marque", "Mod√®le", "Type"]
        
        # üîπ R√©cup√©ration des donn√©es
        vehicules = lister_tous_vehicules()

        # üîπ V√©rification des donn√©es avant affichage
        if vehicules:
            self.tableau_vehicules = TableauVehiculesUI("Liste des V√©hicules", colonnes, vehicules, self.main_window, retour_widget=self, mode="modifier")
            self.main_window.central_widget.addWidget(self.tableau_vehicules)
            self.main_window.central_widget.setCurrentWidget(self.tableau_vehicules)

    def afficher_liste_vehicules_supprimer(self):
        """
        Exibe a lista de ve√≠culos no quadro com possibilidade de exclus√£o por duplo clique.
        """
        # Define as colunas manualmente:
        colonnes = ["ID", "Immatriculation", "Carburant", "Ann√©e", "Couleur", "Statut", "KM", "Marque", "Mod√®le", "Type"]
        
        # Obtenha os ve√≠culos (assumindo que lister_tous_vehicules() retorna apenas a lista de ve√≠culos)
        vehicules = lister_tous_vehicules()

        if vehicules:
            self.tableau_vehicules_supprimer = TableauVehiculesUI("Supprimer un V√©hicule", colonnes, vehicules, self.main_window, self)
            # Conecta o duplo clique para confirmar a exclus√£o
            self.tableau_vehicules_supprimer.table_widget.cellDoubleClicked.connect(self.confirmer_suppression)
            self.main_window.central_widget.addWidget(self.tableau_vehicules_supprimer)
            self.main_window.central_widget.setCurrentWidget(self.tableau_vehicules_supprimer)


    def confirmer_suppression(self, row, column):
        from PyQt5.QtWidgets import QMessageBox

        id_vehic = self.tableau_vehicules_supprimer.table_widget.item(row, 0).text()
        immatriculation = self.tableau_vehicules_supprimer.table_widget.item(row, 1).text()

        # Bo√Æte de confirmation
        reponse = QMessageBox.question(
            None, 
            "Confirmation",
            f"Voulez-vous vraiment supprimer le v√©hicule '{immatriculation}' ?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )

        if reponse == QMessageBox.Yes:
            supprimer_vehicule(id_vehic)
            print("üöó V√©hicule supprim√© avec succ√®s!")
            self.tableau_vehicules_supprimer.table_widget.removeRow(row)
   

    def afficher_liste_vehicules(self):
        """
        R√©cup√®re tous les v√©hicules et les affiche dans le tableau.
        """
        colonnes = ["ID", "Immatriculation", "Carburant", "Ann√©e", "Couleur", "Statut", "KM", "Marque", "Mod√®le", "Type"]
        
        # üîπ R√©cup√©ration des donn√©es
        vehicules = lister_tous_vehicules()

        # üîπ V√©rification des donn√©es avant affichage
        if vehicules:
            self.tableau_vehicules = TableauVehiculesUI("Liste des V√©hicules", colonnes, vehicules, self.main_window, retour_widget=self)
            self.main_window.central_widget.addWidget(self.tableau_vehicules)
            self.main_window.central_widget.setCurrentWidget(self.tableau_vehicules)

    def rechercher_vehicule(self):
        """
        Affiche un champ de recherche et affiche les r√©sultats dans le tableau.
        """
        from PyQt5.QtWidgets import QInputDialog

        terme, ok = QInputDialog.getText(self, "Recherche de V√©hicule", "Entrez une immatriculation ou un mod√®le:")
        
        if ok and terme.strip():
            colonnes, vehicules = rechercher_vehicule(terme.strip())

            if vehicules:
                self.tableau_resultats_recherche = TableauVehiculesUI(
                    "R√©sultats de la Recherche", colonnes, vehicules, self.main_window, retour_widget=self
                )
                self.main_window.central_widget.addWidget(self.tableau_resultats_recherche)
                self.main_window.central_widget.setCurrentWidget(self.tableau_resultats_recherche)
            else:
                from PyQt5.QtWidgets import QMessageBox
                QMessageBox.information(self, "R√©sultat", "Aucun v√©hicule trouv√©.")


    def gerer_maintenance_vehicule(self):
        """
        Affiche la liste des v√©hicules en maintenance dans un tableau d√©di√©.
        """
        colonnes = [
            "ID", "Agence", "Marque", "Mod√®le", "Ann√©e", "Couleur", 
            "Kilom√©trage", "Immatriculation", "Carburant", "Type", "Statut"
        ]

        # üîπ R√©cup√©ration des donn√©es depuis la BD
        donnees = lister_vehicules_en_maintenance()

        # üîπ V√©rification et affichage
        if donnees:
            self.tableau_vehicules_maintenance = TableauVehiculesMaintUI(
                "V√©hicules en Maintenance",
                colonnes,
                donnees,
                self.main_window,
                retour_widget=self
            )
            self.main_window.central_widget.addWidget(self.tableau_vehicules_maintenance)
            self.main_window.central_widget.setCurrentWidget(self.tableau_vehicules_maintenance)
        else:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(self, "Information", "Aucun v√©hicule en maintenance trouv√©.")
